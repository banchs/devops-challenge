name: 'CD/CI Build timeoff-managment Application EKS'
on:
  push:
    branches:
      - main
    paths:
      - 'k8s/**'
  pull_request:
    branches:
      - main
    paths:
      - 'k8s/**'
jobs:
  # Job to create injectable configuration for nested jobs
  loadEnvs:
    name: 'Loading envs and configurations'
    runs-on: ubuntu-latest
    env:
      module_name: "k8s"
    strategy:
      fail-fast: true
    outputs:
      env: ${{ steps.set-envs.outputs.matrix_envs }}
      module_name: "${{ env.module_name }}"
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Create a JSON output to be used as a matrix to determine on which envs run the action
    - id: set-envs
      name: identify module envs
      run: |
        cd ${{ env.module_name }}
        envs=$( find . -maxdepth 1 -type d -and -not -name 'main' | cut -c 3-)
        module_envs=$(for i in $envs; do echo $i; done | jq -R . | jq -s -c .)
        echo "::set-output name=matrix_envs::${module_envs}"
  test:
    runs-on: ubuntu-latest
    needs: loadEnvs
    strategy:
      fail-fast: false
      matrix:
        env: "${{fromJSON(needs.loadEnvs.outputs.env)}}"
    defaults:
      run:
        shell: bash
        working-directory: k8s/${{ matrix.env }}
    environment:
      name: "${{ matrix.env }}"
    steps:
      - uses: actions/checkout@v3
      - name: Clone Project && Build the Docker image
        run: |
          git clone --depth 1 --branch 1.1.1 https://github.com/timeoff-management/timeoff-management-application.git $PWD/timeoff-management
          cd  $PWD/timeoff-management
          sed -i  '/^RUN npm install.*/i RUN rm -rf .npmrc' Dockerfile
          docker build --progress=plain --tag demo-timeoff-${{ matrix.env }}:latest .

  deploy:
    needs: [test,loadEnvs]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env: "${{fromJSON(needs.loadEnvs.outputs.env)}}"
    defaults:
      run:
        shell: bash
        working-directory: k8s/${{ matrix.env }}
    environment:
      name: "${{ matrix.env }}"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 10
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 1200
          role-session-name: "ci-${{ github.actor }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name:  Clone Project, Build and Push image to Amazon ECR
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: demo-timeoff-${{ matrix.env }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          git clone --depth 1 --branch 1.1.1 https://github.com/timeoff-management/timeoff-management-application.git $PWD/timeoff-management
          cd  $PWD/timeoff-management
          sed -i  '/^RUN npm install.*/i RUN rm -rf .npmrc' Dockerfile
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: EKS Auth
        id: set-eks-auth
        run: |
          token=$(aws eks get-token --cluster-name demo-${{ matrix.env }} --region us-east-1 | jq -r .status.token)
          host=$(aws eks describe-cluster --name demo-${{ matrix.env }} | jq -r .cluster.endpoint | cut -c 9- )
          cert=$(aws eks describe-cluster --name demo-${{ matrix.env }} | jq -r .cluster.certificateAuthority.data)
          echo "::add-mask::$token"
          echo "::add-mask::$host"
          echo "::add-mask::$cert"
          echo "::set-output name=token::${token}"
          echo "::set-output name=host::${host}"
          echo "::set-output name=cert::${cert}"
          sed -i 's/\${IMAGE_TAG}/'"$GITHUB_SHA"'/g' deployment.yml
          VERSION=$GITHUB_SHA
          #$(cat $PWD/timeoff-management/package.json | jq  .version)
          sed -i 's/\${RELEASE_VERSION}/'"$VERSION"'/g' deployment.yml

      - name: Run Kubectl apply
        uses: actions-hub/kubectl@master
        env:
          KUBE_TOKEN: ${{ steps.set-eks-auth.outputs.token }}
          KUBE_HOST: ${{ steps.set-eks-auth.outputs.host }}
          KUBE_CERTIFICATE: ${{ steps.set-eks-auth.outputs.cert }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        with:
          args: apply
            --namespace=default
            -f k8s/${{ matrix.env }}/service.yml
            -f k8s/${{ matrix.env }}/deployment.yml

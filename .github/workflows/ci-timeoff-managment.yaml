name: 'CD/CI Build timeoff-managment Application EKS'
on:
  push:
    branches:
      - main
   # paths:
   #   - 'k8s/**'
  pull_request:
    branches:
      - main
   # paths:
   #   - 'k8s/**'
jobs:
  test:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    defaults:
      run:
        shell: bash
       # working-directory: k8s/dev
    strategy:
      matrix:
        node-version: [6.x,8.x,10.x,12.x,13.x, 14.x]
        experimental: [true]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    env:
      USE_CHROME: 1
    steps:
      - uses: actions/checkout@v3
      - run: |
         sudo apt update -y && sudo apt install sqlite3 -y
      - name: Clone Repo Node.js ${{ matrix.node-version }}
        run: |
         git clone --depth 1 --branch 1.1.1 https://github.com/timeoff-management/timeoff-management-application.git timeoff-management
         cd timeoff-management
         rm -rf .npm
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: timeoff-management/package-lock.json

      - name: Install Node.js ${{ matrix.node-version }}
        run: |
         cd  timeoff-management
         rm -rf .npmrc
         #docker build --no-cache --progress=plain --tag demo-timeoff:latest .
         npm install

      - name:  Install ChromeDriver
        run: |
         cd  $PWD/timeoff-management
         npm ci
         npm audit fix --force
         wget https://chromedriver.storage.googleapis.com/94.0.4606.61/chromedriver_linux64.zip
         cd bin; unzip ../chromedriver_linux64.zip; cd ../
         export PATH=$PWD/bin:$PATH
         sudo apt update -y && sudo apt install sqlite3 -y
         sudo apt install  phantomjs
         sudo npm install -g chromedriver
         sudo npm install -g selenium-webdriver
         sudo npm install -g mocha
         node bin/wwww > /dev/null 2>&1 &
         sudo chmod +x bin/chromedriver
         node bin/wwww > /dev/null 2>&1 &
         node node_modules/mocha/bin/mocha --recursive t
  deploy:
    needs: [test]
   # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: k8s/dev
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 10
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 1200
          role-session-name: "ci-${{ github.actor }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name:  Clone Project, Build and Push image to Amazon ECR
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: demo-timeoff
          IMAGE_TAG: ${{ github.sha }}
        run: |
          git clone --depth 1 --branch 1.1.1 https://github.com/timeoff-management/timeoff-management-application.git $PWD/timeoff-management
          cd  $PWD/timeoff-management
          sed -i  '/^RUN npm install.*/i RUN rm -rf .npmrc' Dockerfile
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: EKS Auth
        id: set-eks-auth
        run: |
          token=$(aws eks get-token --cluster-name demo-dev --region us-east-1 | jq -r .status.token)
          host=$(aws eks describe-cluster --name demo-dev | jq -r .cluster.endpoint | cut -c 9- )
          cert=$(aws eks describe-cluster --name demo-dev | jq -r .cluster.certificateAuthority.data)
          echo "::add-mask::$token"
          echo "::add-mask::$host"
          echo "::add-mask::$cert"
          echo "::set-output name=token::${token}"
          echo "::set-output name=host::${host}"
          echo "::set-output name=cert::${cert}"
          sed -i 's/\${IMAGE_TAG}/'"$GITHUB_SHA"'/g' deployment.yml
          VERSION=$GITHUB_SHA
          #$(cat $PWD/timeoff-management/package.json | jq  .version)
          sed -i 's/\${RELEASE_VERSION}/'"$VERSION"'/g' deployment.yml

      - name: Run Kubectl apply
        uses: actions-hub/kubectl@master
        env:
          KUBE_TOKEN: ${{ steps.set-eks-auth.outputs.token }}
          KUBE_HOST: ${{ steps.set-eks-auth.outputs.host }}
          KUBE_CERTIFICATE: ${{ steps.set-eks-auth.outputs.cert }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        with:
          args: apply
            --namespace=default
            -f k8s/dev/service.yml
            -f k8s/dev/deployment.yml
